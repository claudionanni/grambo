# !!Need to add flags to enable disable sections

echo "  "
echo "================================================================================"
echo "|                                                                              |"
echo "| G R A M B O - Galera Log Deforester                                          |"
echo "|                                                                              |"
echo "| Usage: grambo <galera node error log>             # Using filepath           |"
echo "|   or                                                                         |"
echo "| Usage: cat <galera node error log> | grambo       # Using <stdin>            |"
echo "|                                                                              |"
echo "================================================================================"
echo "  "
if [ "$#" -ne 1 ]; then
    echo "Using <stdin> mode."
    if [ -t 0 ]; then
       echo "You did not send a Galera node error log as input, exiting now."
       exit
    fi
    else
    echo "Using filepath mode, ($1)"
fi
    echo "  "
    echo "================================================================================"
    echo "  "
    echo "  "


ReadStdin=0
if [ $# -eq 0 ]; then
	ReadStdin=1
	Piped=$(</dev/stdin)
fi

echo " [MYSQL/MARIADB]"
echo "--------------------------------------------------------------------------------"
 
if [ $ReadStdin -eq 1 ]; then
# Version:
	echo "$Piped" | grep ^Version | sort | uniq | awk '{print "[info] [server] Version: "$2}'
# Socket:
  	echo "$Piped" | grep ^Version | sort | uniq | awk '{print "[info] [server] Socket: "$4}'
# Port:
  	echo "$Piped" | grep ^Version | sort | uniq | awk '{print "[info] [server] Port: "$6}'
# Wsrep:
  	echo "$Piped" | grep ^Version | sort | uniq | awk -F"wsrep_" '{print "[info] [server] Wsrep: "$2}'
else
# Version:
	grep ^Version $1 | sort | uniq | awk '{print "[info] [server] Version: "$2}'
# Socket:
  	grep ^Version $1 | sort | uniq | awk '{print "[info] [server] Socket: "$4}'
# Port:
  	grep ^Version $1 | sort | uniq | awk '{print "[info] [server] Port: "$6}'
# Wsrep:
  	grep ^Version $1 | sort | uniq | awk -F"wsrep_" '{print "[info] [server] Wsrep: "$2}'
fi
echo "================================================================================"
echo "  "


echo " [GALERA]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then

# Node UUID:
	echo "$Piped" | grep -i "\[Note\] WSREP: " | grep "listening at tcp"  |awk '{print $5}' | sort | uniq | awk -F"(" '{print $2}' | awk -F"," '{ print "[info] [galera] Node UUID: "$1}'
# Group UUID:
	echo "$Piped" | grep -i "group uuid" | sort | uniq | awk '{print "[info] [galera] Group UUID: "$4}' 
# Group name:
	echo "$Piped" | grep "connecting to group" | awk -F"connecting to group" '{print $2}' | awk '{print "[info] [galera] Group name: "$1}'
# Peers:
	echo "$Piped" | grep "connecting to group" | awk -F"connecting to group" '{print $2}' | awk '{print "[info] [galera] Peers: "$3}'
# Version:
	echo "$Piped" | grep "by Codership" | awk -F"by Codership" '{print $1}' | awk '{print "[info] [galera] Version: "$7}' |sort | uniq 
	ip_address=$(echo "$Piped" | grep -i "base_host" | awk -F"base_host = " '{print $2}' | awk -F";" '{print $1}' | sort | uniq)
# Host:
	echo "$Piped" | grep -i "base_host" | awk -F"base_host = " '{print $2}' | awk -F";" '{print "[info] [galera] "$1}' | sort | uniq
	ipax=$ip_address
# Port:
	echo "$Piped" | grep -i "base_port" | awk -F"base_port = " '{print $2}' | awk -F";" '{print "[info] [galera] Port: " $1}' | sort | uniq

else

# Node UUID:
	grep -i "\[Note\] WSREP: " $1 | grep "listening at tcp"  |awk '{print $5}' | sort | uniq | awk -F"(" '{print $2}' | awk -F"," '{ print "[info] [galera] Node UUID: "$1}'
# Group UUID:
	grep -i "group uuid" $1 | sort | uniq | awk '{print "[info] [galera] Group UUID: "$4}' 
# Group name:
	grep "connecting to group" $1 | awk -F"connecting to group" '{print $2}' | awk '{print "[info] [galera] Group name: "$1}'
# Peers:
	grep "connecting to group" $1 | awk -F"connecting to group" '{print $2}' | awk '{print "[info] [galera] Peers: "$3}'
# Version:
	grep "by Codership" $1 | awk -F"by Codership" '{print $1}' | awk '{print "[info] [galera] Version: "$7}' |sort | uniq 
# Host:
	ip_address=$(grep -i "base_host" $1 | awk -F"base_host = " '{print $2}' | awk -F";" '{print $1}' | sort | uniq)
	echo "[info] [galera] Address: $ip_address"
	ipax=$ip_address
# Port:
	grep -i "base_port" $1 | awk -F"base_port = " '{print $2}' | awk -F";" '{print "[info] [galera] Port: " $1}' | sort | uniq

fi

echo "================================================================================"
echo "  "
echo " [IST EVENTS]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	echo "$Piped" | egrep -i " ist " | awk -v ipa=$ipax '{print ipa" 20"$0}' | awk '{print "[event] [ist] "$0}'
else
	egrep -i " ist " $1  | awk -v ipa=$ipax '{print ipa" 20"$0}' | awk '{print "[event] [ist] "$0}'
fi


echo "================================================================================"
echo "  "

echo " [SST EVENTS] #### TRICKY -> Currently RC=( \${PIPESTATUS[@]} )  is cut (if present, or any other open parenthesis stuff before the timestamp) -- problem with ( as FS in awk"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	(echo "$Piped" | grep "^WSREP_SST" | awk -F'(' '{print $NF" "$1}' | awk -v ipa=$ipax -F') ' '{print ipa" "$1" "$2}'; echo "$Piped" | grep -i sst | grep -v ^WSREP_SST  | awk -v ipa=$ipax '{print ipa" 20"$0}') | sort  | awk '{print "[event] [sst] "$0}'
else
	(grep "^WSREP_SST" $1  | awk -F'(' '{print $NF" "$1}' | awk -v ipa=$ipax -F') ' '{print ipa" "$1" "$2}' ;grep -i sst $1 | grep -v ^WSREP_SST  | awk -v ipa=$ipax '{print ipa" 20"$0}') | sort  | awk '{print "[event] [sst] "$0}'
fi

echo "================================================================================"
echo "  "

echo " [GCOMM EVENTS]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	echo "$Piped" | grep "WSREP: gcomm:" | awk -v ipa=$ipax '{print ipa" 20"$0}'  | awk '{print "[event] [gco] "$0}'
else
	grep "WSREP: gcomm:" $1 | awk -v ipa=$ipax '{print ipa" 20"$0}'  | awk '{print "[event] [gco] "$0}'
fi

echo "================================================================================"
echo "  "

echo " [STATUS TRANSITIONS]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	echo "$Piped" | grep -hi SHIFTING | awk -v ipa=$ipax '{print ipa" 20"$1" "$2" "$6"\t\t"$8}' | awk '{print "[event] [stt] "$0}'
else
	grep -hi SHIFTING $1 | awk -v ipa=$ipax '{print ipa" 20"$1" "$2" "$6"\t\t"$8}' | awk '{print "[event] [stt] "$0}'
fi

echo "================================================================================"
echo "  "

echo " [WARNINGS]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	echo "$Piped" | grep -i warning | awk -v ipa=$ipax '{print "[event] [warning] "ipa" 20"$0}'
else
	grep -i warning $1 | awk -v ipa=$ipax '{print "[event] [warning] "ipa" 20"$0}'
fi

echo "================================================================================"
echo "  "

echo " [ERRORS]"
echo "--------------------------------------------------------------------------------"

if [ $ReadStdin -eq 1 ]; then
	echo "$Piped" | grep -i "error " | awk -v ipa=$ipax '{print "[event] [error] "ipa" "$0}'
else
	grep -i "error " $1 | awk -v ipa=$ipax '{print "[event] [error] "ipa" "$0}'
fi

echo "================================================================================"
echo "  "




